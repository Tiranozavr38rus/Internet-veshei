#define REMOTEXY_MODE__ESP8266WIFI_LIB_CLOUD
#include <ESP8266WiFi.h>
#include <NTPClient.h>
#include <RemoteXY.h>
#include <WiFiUdp.h>

// RemoteXY connection settings 
#define REMOTEXY_WIFI_SSID "FOMA"
#define REMOTEXY_WIFI_PASSWORD "foma10050107"
#define REMOTEXY_CLOUD_SERVER "cloud.remotexy.com"
#define REMOTEXY_CLOUD_PORT 6376
#define REMOTEXY_CLOUD_TOKEN "a39668cda05fda160c49aefdfa3c9b64"


#include <RemoteXY.h>

// RemoteXY configurate  
#pragma pack(push, 1)
uint8_t RemoteXY_CONF[] =   // 297 bytes
  { 255,12,0,6,0,34,1,17,0,0,0,31,1,106,200,1,1,16,0,7,
  16,47,24,17,21,2,26,7,88,2,16,7,20,2,26,67,34,2,18,11,
  2,24,16,3,129,27,38,53,6,24,208,146,209,128,208,181,208,188,209,143,
  32,208,177,209,131,208,180,208,184,208,187,209,140,208,189,208,184,208,186,208,
  176,0,7,4,71,23,10,20,2,26,7,4,90,23,10,20,2,26,129,30,
  74,49,6,24,208,159,208,190,208,178,209,130,208,190,209,128,32,40,208,188,
  208,184,208,189,209,131,209,130,209,139,41,0,129,29,90,68,6,24,208,148,
  208,187,208,184,209,130,208,181,208,187,209,140,208,189,208,190,209,129,209,130,
  209,140,32,209,128,208,176,209,129,209,129,208,178,208,181,209,130,208,176,0,
  129,51,96,26,6,24,40,208,188,208,184,208,189,209,131,209,130,209,139,41,
  0,4,4,123,98,12,128,2,26,129,27,113,51,6,24,208,175,209,128,208,
  186,208,190,209,129,209,130,209,140,32,209,128,208,176,209,129,209,129,208,178,
  208,181,209,130,208,176,0,129,42,46,5,17,24,58,0,7,49,47,24,17,
  21,2,26,129,52,0,3,12,24,58,0,67,55,2,22,11,0,24,31,3,
  10,80,46,20,20,48,4,1,31,79,78,0,31,79,70,70,0 };
  
// this structure defines all the variables and events of your control interface 
struct {

    // input variables
  int16_t timerhour; // -32768 .. +32767
  int16_t timemap; // -32768 .. +32767
  int16_t repeattimer; // -32768 .. +32767
  int16_t longtimer; // -32768 .. +32767
  int8_t light; // =0..100 slider position
  int16_t timerminute; // -32768 .. +32767
  uint8_t timerbutton; // =1 if state is ON, else =0

    // output variables
  char timehour[3]; // string UTF8 end zero
  char timeminute[3]; // string UTF8 end zero

    // other variable
  uint8_t connect_flag;  // =1 if wire connected, else =0

} RemoteXY;
#pragma pack(pop)

  bool timerflag = 0;
  uint8_t lighthour;
uint8_t lightminute;
int16_t lightSHIM;
int16_t SHIMout = 0;
bool lightONflag = 0;
int tmr = 0;
int timedelay = 0;


/////////////////////////////////////////////
//           END RemoteXY include          //
/////////////////////////////////////////////
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org");



void setup() 
{
  RemoteXY_Init (); 
  timeClient.begin();
   Serial.begin(115200);
   RemoteXY.timemap = 8;
   RemoteXY.repeattimer = 5;
  RemoteXY.longtimer = 20;
  RemoteXY.timerbutton = 0;
  RemoteXY.timerhour = 0;
  RemoteXY.light = 100;
  // TODO you setup code
   Serial.println("hello");
   pinMode(5, OUTPUT);
   pinMode(4, OUTPUT);
   pinMode(12, INPUT);
   pinMode(14, INPUT);
   pinMode(0, OUTPUT);
}

void loop() 
{ 
  RemoteXY_Handler ();
  ////////////////////////////Время/////////////////////
   timeClient.setTimeOffset(RemoteXY.timemap * 3600);
  timeClient.update();
  int currentHour = timeClient.getHours();
 char Hour[2];
 itoa(currentHour, Hour, 10);
if (currentHour < 10) {
   Hour[1] = Hour[0];
 Hour[0] = '0';
 } 
 RemoteXY.timehour[0] = Hour[0];
 RemoteXY.timehour[1] = Hour[1];
  int currentMinute = timeClient.getMinutes();
  char Minute[2];
  itoa(currentMinute, Minute, 10);
 if (currentMinute < 10) {
   Minute[1] = Minute[0];
  Minute[0] = '0';
 } 
  RemoteXY.timeminute[0] = Minute[0];
 RemoteXY.timeminute[1] = Minute[1];
/////////////////////////////Будильник/////////////////////
 if (RemoteXY.timerhour == currentHour && RemoteXY.timerminute == currentMinute && RemoteXY.timerbutton == 1) {
  Serial.println("TIMER");
  digitalWrite(5, HIGH);
timerflag = 1;
 } else {
  timerflag = 0;
  digitalWrite(5, LOW);
 }
 if (RemoteXY.timerbutton == 1 && RemoteXY.connect_flag == 1) {
  digitalWrite(0, HIGH);
  } else {
    digitalWrite(0, LOW);
 }
 if (timerflag == 1 && digitalRead(12) == HIGH) {
  RemoteXY.timerbutton = 0;
 }
/////////////////////////////Повтор/////////////////////////
if (timerflag == 1 && digitalRead(14) == HIGH) {
  int minutebuffer;
  minutebuffer = RemoteXY.timerminute + RemoteXY.repeattimer;
  if (minutebuffer > 59) {
    minutebuffer = minutebuffer - 60;
    RemoteXY.timerhour ++;
  }
  RemoteXY.timerminute = minutebuffer;
}
/////////////////////////////Рассвет////////////////////////
lightSHIM = RemoteXY.light;
lightSHIM = map(lightSHIM, 0, 100, 1, 255);
timedelay = RemoteXY.longtimer * 60000 / lightSHIM;
int lightbuffer = RemoteXY.timerminute - RemoteXY.longtimer;
int lightbufferH = RemoteXY.timerhour;
if (lightbuffer < 0) {
  lightbuffer = 60 + lightbuffer;
 lightbufferH--;
 if (lightbufferH < 0) {
  lightbufferH = 23;
 }
}
lightminute = lightbuffer;
lighthour = lightbufferH;
if (currentHour == lighthour && currentMinute == lightminute && RemoteXY.timerbutton == 1) {
Serial.println("LIGHT");
lightONflag = 1;
}
if (RemoteXY.timerbutton == 0) {
  lightONflag = 0;
  SHIMout = 0;
}// 
if (millis() - tmr >= timedelay && lightONflag == 1) {
    tmr = millis();
    if (SHIMout < lightSHIM) {             
    SHIMout++;
    }
  }
  if (lightONflag == 1) {
    analogWrite(4, SHIMout);
  } else {
    analogWrite(4, 0);
  }
   

 //delay(2000);
}